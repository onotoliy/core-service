/*
 * This file is generated by jOOQ.
 */
package io.github.onotoliy.core.jooq.tables;


import io.github.onotoliy.core.jooq.DefaultSchema;
import io.github.onotoliy.core.jooq.Keys;
import io.github.onotoliy.core.jooq.tables.records.CoreLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Логи
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreLog extends TableImpl<CoreLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CORE_LOG</code>
     */
    public static final CoreLog CORE_LOG = new CoreLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreLogRecord> getRecordType() {
        return CoreLogRecord.class;
    }

    /**
     * The column <code>CORE_LOG.GUID</code>. Уникальный идентификатор
     */
    public final TableField<CoreLogRecord, UUID> GUID = createField(DSL.name("GUID"), SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор");

    /**
     * The column <code>CORE_LOG.AUTHOR</code>. Автор
     */
    public final TableField<CoreLogRecord, UUID> AUTHOR = createField(DSL.name("AUTHOR"), SQLDataType.UUID, this, "Автор");

    /**
     * The column <code>CORE_LOG.LEVEL</code>. Уровень логирования
     */
    public final TableField<CoreLogRecord, String> LEVEL = createField(DSL.name("LEVEL"), SQLDataType.VARCHAR(2147483647), this, "Уровень логирования");

    /**
     * The column <code>CORE_LOG.CREATION_DATE</code>. Дата создания записи
     */
    public final TableField<CoreLogRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("CREATION_DATE"), SQLDataType.LOCALDATETIME(6), this, "Дата создания записи");

    /**
     * The column <code>CORE_LOG.MESSAGE</code>. Сообщение
     */
    public final TableField<CoreLogRecord, String> MESSAGE = createField(DSL.name("MESSAGE"), SQLDataType.VARCHAR(2147483647), this, "Сообщение");

    /**
     * The column <code>CORE_LOG.BEAN_NAME</code>. Название класса
     */
    public final TableField<CoreLogRecord, String> BEAN_NAME = createField(DSL.name("BEAN_NAME"), SQLDataType.VARCHAR(2147483647), this, "Название класса");

    /**
     * The column <code>CORE_LOG.STACK_TRACE</code>. Stack Trace
     */
    public final TableField<CoreLogRecord, String> STACK_TRACE = createField(DSL.name("STACK_TRACE"), SQLDataType.VARCHAR(2147483647), this, "Stack Trace");

    private CoreLog(Name alias, Table<CoreLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreLog(Name alias, Table<CoreLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Логи"), TableOptions.table());
    }

    /**
     * Create an aliased <code>CORE_LOG</code> table reference
     */
    public CoreLog(String alias) {
        this(DSL.name(alias), CORE_LOG);
    }

    /**
     * Create an aliased <code>CORE_LOG</code> table reference
     */
    public CoreLog(Name alias) {
        this(alias, CORE_LOG);
    }

    /**
     * Create a <code>CORE_LOG</code> table reference
     */
    public CoreLog() {
        this(DSL.name("CORE_LOG"), null);
    }

    public <O extends Record> CoreLog(Table<O> child, ForeignKey<O, CoreLogRecord> key) {
        super(child, key, CORE_LOG);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CoreLogRecord> getPrimaryKey() {
        return Keys.PK_CORE_LOG;
    }

    @Override
    public List<UniqueKey<CoreLogRecord>> getKeys() {
        return Arrays.<UniqueKey<CoreLogRecord>>asList(Keys.PK_CORE_LOG);
    }

    @Override
    public CoreLog as(String alias) {
        return new CoreLog(DSL.name(alias), this);
    }

    @Override
    public CoreLog as(Name alias) {
        return new CoreLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreLog rename(String name) {
        return new CoreLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreLog rename(Name name) {
        return new CoreLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, String, LocalDateTime, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
